
using namespace metal;

#include "RayMarcher.txt"

struct VertexIn {
	float3 position [[ attribute(0) ]];
	float4 color [[ attribute(1) ]];
	float2 texCoord [[ attribute(2) ]];
};

struct RasterizerData {
	float4 position [[ position ]];
	float4 color;
	float2 texCoord;
};
vertex RasterizerData basic_vertex_shader(const VertexIn vIn [[ stage_in ]],
										  constant float &viewRatio [[ buffer(1) ]],
										  constant float &imageRatio [[ buffer(2) ]]) {
	RasterizerData rd;
	if (imageRatio < viewRatio) {
		rd.position = float4(vIn.position.x * imageRatio / viewRatio, vIn.position.y, vIn.position.z, 1);
	} else {
		rd.position = float4(vIn.position.x, vIn.position.y / imageRatio * viewRatio, vIn.position.z, 1);
	}
	//rd.position = float4(vIn.position.x / 2, vIn.position.y / 2, 0, 1);
	rd.color = vIn.color;
	rd.texCoord = vIn.texCoord;
	
	return rd;
}

fragment float4 basic_fragment_shader(RasterizerData rd [[ stage_in ]],
									  sampler sampler2d [[ sampler(0) ]],
									  texture2d_array<float> texture [[ texture(0) ]],
									  constant ShaderInfo &info [[buffer(0)]],
									  constant SkyBoxLight *lights [[buffer(2)]]) {
	float4 color = float4(0);
	
	color.x += texture.sample(sampler2d, rd.texCoord, 2).x * info.emissionStrength;
	color.y += texture.sample(sampler2d, rd.texCoord, 3).x * info.emissionStrength;
	color.z += texture.sample(sampler2d, rd.texCoord, 4).x * info.emissionStrength;
	
	for (int c = 0; c < info.lightsLength; c++) {
		int start = 5 + c * 3;
		SkyBoxLight light = lights[c];
		
		color.x += texture.sample(sampler2d, rd.texCoord, start + 0).x * light.color.x * light.strength;
		color.y += texture.sample(sampler2d, rd.texCoord, start + 1).x * light.color.y * light.strength;
		color.z += texture.sample(sampler2d, rd.texCoord, start + 2).x * light.color.z * light.strength;
	}
	
	color = color / info.exposure;
	
	
	float depth = texture.sample(sampler2d, rd.texCoord, 1).x * info.depthStrength / info.exposure;
	depth = clamp(depth, 0.0, 1.0);
	
	color.xyz = color.xyz + info.depthColor * depth;
	
	float background = texture.sample(sampler2d, rd.texCoord, 0).x / info.exposure;
	
	color.xyz = color.xyz * (1 - background) + info.backgroundColor * background - info.cutoff;
	
	color.a = 1;
	
	return color;
}



fragment float4 depth_fragment_shader(RasterizerData rd [[ stage_in ]],
									  constant ShaderInfo &shaderInfo [[buffer(0)]],
									  device Voxel *voxels [[buffer(1)]],
									  constant SkyBoxLight *lights [[buffer(2)]],
									  constant float *mConstants [[buffer(4)]],
									  constant float *dConstants [[buffer(5)]]) {
	ShaderInfo info = shaderInfo;
	return float4(depthMap(rd.texCoord, voxels, info, mConstants, dConstants));
}

fragment float4 preview_fragment_shader(RasterizerData rd [[ stage_in ]],
										constant ShaderInfo &shaderInfo [[buffer(0)]],
										device Voxel *voxels [[buffer(1)]],
										constant SkyBoxLight *lights [[buffer(2)]],
										constant float *mConstants [[buffer(4)]],
										constant float *dConstants [[buffer(5)]]) {
	ShaderInfo info = shaderInfo;
	return preview(rd.texCoord, voxels, lights, info, mConstants, dConstants);
}

fragment float4 sample_fragment_shader(RasterizerData rd [[ stage_in ]],
									   constant ShaderInfo &shaderInfo [[buffer(0)]],
									   device Voxel *voxels [[buffer(1)]],
									   constant SkyBoxLight *lights [[buffer(2)]],
									   constant float *constants [[buffer(4)]]) {
	
	//ShaderInfo info = shaderInfo;
	
	return float4(1);
}

kernel void ray_compute_shader(texture2d_array<float, access::read> readTexture [[texture(0)]],
							   texture2d_array<float, access::write> writeTexture [[texture(1)]],
							   uint index [[ thread_position_in_grid ]],
							   constant ShaderInfo &shaderInfo [[buffer(0)]],
							   device Voxel *voxels [[buffer(1)]],
							   constant SkyBoxLight *lights [[buffer(2)]],
							   constant float *mConstants [[buffer(4)]],
							   constant float *dConstants [[buffer(5)]]) {
							   
	
	ShaderInfo info = shaderInfo;
	
	float anIndex = info.realIndex.x + index;
	
	if (anIndex > info.realIndex.w) {
		return;
	}
	anIndex = fmod(anIndex, info.realIndex.y * info.realIndex.z);
	
	float2 pos;
	pos.x = floor(fmod(anIndex, float(info.realIndex.y * info.realIndex.z)) / float(info.realIndex.z));
	pos.y = fmod(anIndex, float(info.realIndex.z));
	uint2 textureIndex = uint2(pos.x, pos.y);
	
	uint3 seed = info.randomSeed;
	seed.x += index * 402;
	seed.y += index * 503;
	seed.z += index * 305;
	
	
	float2 randomOffset;
	randomOffset.x = randomFloat(info.randomSeed.x, pos.x * 983414, anIndex * 33429);
	randomOffset.y = randomFloat(info.randomSeed.y, pos.y * 754239, anIndex * 46523);
	
	pos.x = (pos.x + 0) / readTexture.get_width();
	pos.y = (pos.y + 0) / readTexture.get_height();
	
	//second param bounce limit
	Channels channels = getPointColor(pos, 4, voxels, false, lights, float2(readTexture.get_width(), readTexture.get_height()), info, mConstants, dConstants);
	
 
    float3 color;
    float depth = channels.channels[1];
    depth = depth * info.depthStrength;
    depth = clamp(depth, 0.0, 1.0);
    
    for (int c = 2; c + 2 < channelsLength; c += 3) {
        color.x = channels.channels[c + 0];
        color.y = channels.channels[c + 1];
        color.z = channels.channels[c + 2];
        color = color * (1 - depth);
        channels.channels[c + 0] = color.x;
        channels.channels[c + 1] = color.y;
        channels.channels[c + 2] = color.z;
    }
 
	//everything should be averages
	for (int c = 0; c < channelsLength; c++) {
		float old = readTexture.read(textureIndex, c).x;
		old += channels.channels[c];
		writeTexture.write(float4(old, 0, 0, 0), textureIndex, c);
	}
 
    

	
	return;
}

kernel void reset_compute_shader(texture2d_array<float, access::write> writeTexture [[texture(0)]],
								 uint2 index [[ thread_position_in_grid]],
								 constant ShaderInfo &info [[buffer(0)]]) {
	for (int c = 0; c < channelsLength; c++) {
		writeTexture.write(float4(0, 0, 0, 0), index, c);
	}
	return;
}
